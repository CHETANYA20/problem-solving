{- What is the value of the first triangle number to have over five hundred 
   divisors? 
   * Triangle Number: generated by adding the natural numbers
     e.g. 1, 1+2, 1+2+3, 1+2+3+4, etc.
 -}

{- Solution: factorize the number and compute the number of product 
             combinations (e.g. 28 = 2^2 * 7 => 3*2 = 6 divisors
                                30 = 2*3*5 => 2*2*2 = 8 divisors, etc.) 
-}

import Data.List
import Control.Arrow

factorize n | n <= 1 = []
            | otherwise = let m = head . take 1 . dropWhile (\x -> n `mod` x /= 0) $ [2..]
                          in m:factorize (n `div` m)

sol = take 1 $ dropWhile ((<500) . snd) $ 
      map ((product &&& (product . map (\x -> length x + 1) . groupBy (==))) . factorize) $ 
      scanl (+) 1 [2..]


{- An interesting way to factorize a number.
   Got it from the forum; by dying_sphynx
-}
minDivisor x = head [y | y <- [2..], x `mod` y == 0] 
nextFactor 1 = Nothing 
nextFactor n = let m = minDivisor n in Just (m, n `div` m) 
factorize2 = unfoldr nextFactor 
